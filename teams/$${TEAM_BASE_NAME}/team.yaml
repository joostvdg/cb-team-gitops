apiVersion: v1
kind: Namespace
metadata:
  labels:
    createdBy: CloudBeesCore
  name: cb-teams-hex
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    createdBy: CloudBeesCore
  name: jenkins
  namespace: cb-teams-hex
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    createdBy: CloudBeesCore
  name: master-management
  namespace: cb-teams-hex
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods/exec
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods/log
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - list
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    createdBy: CloudBeesCore
  name: pods-all
  namespace: cb-teams-hex
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods/exec
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods/log
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    createdBy: CloudBeesCore
  name: cjoc
  namespace: cb-teams-hex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: master-management
subjects:
- kind: ServiceAccount
  name: cjoc
  namespace: jx-production
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    createdBy: CloudBeesCore
  name: jenkins
  namespace: cb-teams-hex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: pods-all
subjects:
- kind: ServiceAccount
  name: jenkins
  namespace: cb-teams-hex
---
apiVersion: v1
data:
  jenkins-agent: "#!/usr/bin/env sh\n# The MIT License\n#\n#  Copyright (c) 2015,
    CloudBees, Inc.\n#\n#  Permission is hereby granted, free of charge, to any person
    obtaining a copy\n#  of this software and associated documentation files (the
    \"Software\"), to deal\n#  in the Software without restriction, including without
    limitation the rights\n#  to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell\n#  copies of the Software, and to permit persons to whom the Software
    is\n#  furnished to do so, subject to the following conditions:\n#\n#  The above
    copyright notice and this permission notice shall be included in\n#  all copies
    or substantial portions of the Software.\n#\n#  THE SOFTWARE IS PROVIDED \"AS
    IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n#  IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n#  FITNESS FOR A PARTICULAR PURPOSE
    AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n#  AUTHORS OR COPYRIGHT HOLDERS BE
    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n#  LIABILITY, WHETHER IN AN ACTION OF
    CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n#  OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN\n#  THE SOFTWARE.\n# Usage jenkins-slave.sh
    [options] -url http://jenkins [SECRET] [AGENT_NAME]\n# Optional environment variables
    :\n# * JENKINS_TUNNEL : HOST:PORT for a tunnel to route TCP traffic to jenkins
    host, when jenkins can't be directly accessed over network\n# * JENKINS_URL :
    alternate jenkins URL\n# * JENKINS_SECRET : agent secret, if not set as an argument\n#
    * JENKINS_AGENT_NAME : agent name, if not set as an argument\nif [ $# -eq 1 ];
    then\n    # if `docker run` only has one arguments, we assume user is running
    alternate command like `bash` to inspect the image\n    exec \"$@\"\nelse\n    #
    if -tunnel is not provided try env vars\n    case \"$@\" in\n        *\"-tunnel
    \"*) ;;\n        *)\n        if [ ! -z \"$JENKINS_TUNNEL\" ]; then\n            TUNNEL=\"-tunnel
    $JENKINS_TUNNEL\"\n        fi ;;\n    esac\n    if [ -n \"$JENKINS_URL\" ]; then\n
    \       URL=\"-url $JENKINS_URL\"\n    fi\n    if [ -n \"$JENKINS_NAME\" ]; then\n
    \       JENKINS_AGENT_NAME=\"$JENKINS_NAME\"\n    fi  \n    if [ -z \"$JNLP_PROTOCOL_OPTS\"
    ]; then\n        echo \"Warning: JnlpProtocol3 is disabled by default, use JNLP_PROTOCOL_OPTS
    to alter the behavior\"\n        JNLP_PROTOCOL_OPTS=\"-Dorg.jenkinsci.remoting.engine.JnlpProtocol3.disabled=true\"\n
    \   fi\n    # If both required options are defined, do not pass the parameters\n
    \   OPT_JENKINS_SECRET=\"\"\n    if [ -n \"$JENKINS_SECRET\" ]; then\n        case
    \"$@\" in\n            *\"${JENKINS_SECRET}\"*) echo \"Warning: SECRET is defined
    twice in command-line arguments and the environment variable\" ;;\n            *)\n
    \           OPT_JENKINS_SECRET=\"${JENKINS_SECRET}\" ;;\n        esac\n    fi\n
    \   \n    OPT_JENKINS_AGENT_NAME=\"\"\n    if [ -n \"$JENKINS_AGENT_NAME\" ];
    then\n        case \"$@\" in\n            *\"${JENKINS_AGENT_NAME}\"*) echo \"Warning:
    AGENT_NAME is defined twice in command-line arguments and the environment variable\"
    ;;\n            *)\n            OPT_JENKINS_AGENT_NAME=\"${JENKINS_AGENT_NAME}\"
    ;;\n        esac\n    fi\n    SLAVE_JAR=/usr/share/jenkins/slave.jar\n    if [
    ! -f \"$SLAVE_JAR\" ]; then\n        tmpfile=$(mktemp)\n        if hash wget >
    /dev/null 2>&1; then\n            wget -O \"$tmpfile\" \"$JENKINS_URL/jnlpJars/slave.jar\"\n
    \       elif hash curl > /dev/null 2>&1; then\n            curl -o \"$tmpfile\"
    \"$JENKINS_URL/jnlpJars/slave.jar\"\n        else\n            echo \"Image does
    not include $SLAVE_JAR and could not find wget or curl to download it\"\n            return
    1\n        fi\n        SLAVE_JAR=$tmpfile\n    fi\n    #TODO: Handle the case
    when the command-line and Environment variable contain different values.\n    #It
    is fine it blows up for now since it should lead to an error anyway.\n    exec
    java $JAVA_OPTS $JNLP_PROTOCOL_OPTS -cp $SLAVE_JAR hudson.remoting.jnlp.Main -headless
    $TUNNEL $URL $OPT_JENKINS_SECRET $OPT_JENKINS_AGENT_NAME \"$@\"\nfi\n"
kind: ConfigMap
metadata:
  labels:
    createdBy: CloudBeesCore
  name: jenkins-agent
  namespace: cb-teams-hex
---
apiVersion: v1
kind: ResourceQuota
metadata:
  labels:
    createdBy: CloudBeesCore
  name: resource-quota
  namespace: cb-teams-hex
spec:
  hard:
    limits.cpu: "5"
    limits.memory: 10Gi
    persistentvolumeclaims: "10"
    pods: "20"
    requests.cpu: "4"
    requests.memory: 6Gi
    services.loadbalancers: "0"
    services.nodeports: "0"
